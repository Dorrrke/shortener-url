// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: grpc/proto/shortener.proto

package shortenergrpcv1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Shortener_GetOriginalURL_FullMethodName    = "/shortenergrpc.Shortener/GetOriginalURL"
	Shortener_ShortenerURL_FullMethodName      = "/shortenergrpc.Shortener/ShortenerURL"
	Shortener_ShortenerJSON_FullMethodName     = "/shortenergrpc.Shortener/ShortenerJSON"
	Shortener_CheckDBConnection_FullMethodName = "/shortenergrpc.Shortener/CheckDBConnection"
	Shortener_GetAllURLs_FullMethodName        = "/shortenergrpc.Shortener/GetAllURLs"
	Shortener_InsertBatch_FullMethodName       = "/shortenergrpc.Shortener/InsertBatch"
	Shortener_DeleteURL_FullMethodName         = "/shortenergrpc.Shortener/DeleteURL"
	Shortener_ServiceStat_FullMethodName       = "/shortenergrpc.Shortener/ServiceStat"
)

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClient interface {
	GetOriginalURL(ctx context.Context, in *GetOriginalURLRequest, opts ...grpc.CallOption) (*GetOriginalURLResponce, error)
	ShortenerURL(ctx context.Context, in *ShortenerURLRequest, opts ...grpc.CallOption) (*ShortenerURLResponce, error)
	ShortenerJSON(ctx context.Context, in *ShortenerJSONRequest, opts ...grpc.CallOption) (*ShortenerJSONResponce, error)
	CheckDBConnection(ctx context.Context, in *CheckDBConnectionRequest, opts ...grpc.CallOption) (*CheckDBConnectionResponce, error)
	GetAllURLs(ctx context.Context, in *GetAllURLsRequest, opts ...grpc.CallOption) (*GetAllURLsResponce, error)
	InsertBatch(ctx context.Context, in *InsertBatchRequest, opts ...grpc.CallOption) (*InsertBatchResponce, error)
	DeleteURL(ctx context.Context, in *DeleteURLRequest, opts ...grpc.CallOption) (*DeleteURLResponce, error)
	ServiceStat(ctx context.Context, in *ServiceStatRequest, opts ...grpc.CallOption) (*ServiceStatResponce, error)
}

type shortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClient(cc grpc.ClientConnInterface) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) GetOriginalURL(ctx context.Context, in *GetOriginalURLRequest, opts ...grpc.CallOption) (*GetOriginalURLResponce, error) {
	out := new(GetOriginalURLResponce)
	err := c.cc.Invoke(ctx, Shortener_GetOriginalURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) ShortenerURL(ctx context.Context, in *ShortenerURLRequest, opts ...grpc.CallOption) (*ShortenerURLResponce, error) {
	out := new(ShortenerURLResponce)
	err := c.cc.Invoke(ctx, Shortener_ShortenerURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) ShortenerJSON(ctx context.Context, in *ShortenerJSONRequest, opts ...grpc.CallOption) (*ShortenerJSONResponce, error) {
	out := new(ShortenerJSONResponce)
	err := c.cc.Invoke(ctx, Shortener_ShortenerJSON_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) CheckDBConnection(ctx context.Context, in *CheckDBConnectionRequest, opts ...grpc.CallOption) (*CheckDBConnectionResponce, error) {
	out := new(CheckDBConnectionResponce)
	err := c.cc.Invoke(ctx, Shortener_CheckDBConnection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetAllURLs(ctx context.Context, in *GetAllURLsRequest, opts ...grpc.CallOption) (*GetAllURLsResponce, error) {
	out := new(GetAllURLsResponce)
	err := c.cc.Invoke(ctx, Shortener_GetAllURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) InsertBatch(ctx context.Context, in *InsertBatchRequest, opts ...grpc.CallOption) (*InsertBatchResponce, error) {
	out := new(InsertBatchResponce)
	err := c.cc.Invoke(ctx, Shortener_InsertBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) DeleteURL(ctx context.Context, in *DeleteURLRequest, opts ...grpc.CallOption) (*DeleteURLResponce, error) {
	out := new(DeleteURLResponce)
	err := c.cc.Invoke(ctx, Shortener_DeleteURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) ServiceStat(ctx context.Context, in *ServiceStatRequest, opts ...grpc.CallOption) (*ServiceStatResponce, error) {
	out := new(ServiceStatResponce)
	err := c.cc.Invoke(ctx, Shortener_ServiceStat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
// All implementations must embed UnimplementedShortenerServer
// for forward compatibility
type ShortenerServer interface {
	GetOriginalURL(context.Context, *GetOriginalURLRequest) (*GetOriginalURLResponce, error)
	ShortenerURL(context.Context, *ShortenerURLRequest) (*ShortenerURLResponce, error)
	ShortenerJSON(context.Context, *ShortenerJSONRequest) (*ShortenerJSONResponce, error)
	CheckDBConnection(context.Context, *CheckDBConnectionRequest) (*CheckDBConnectionResponce, error)
	GetAllURLs(context.Context, *GetAllURLsRequest) (*GetAllURLsResponce, error)
	InsertBatch(context.Context, *InsertBatchRequest) (*InsertBatchResponce, error)
	DeleteURL(context.Context, *DeleteURLRequest) (*DeleteURLResponce, error)
	ServiceStat(context.Context, *ServiceStatRequest) (*ServiceStatResponce, error)
	mustEmbedUnimplementedShortenerServer()
}

// UnimplementedShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServer struct {
}

func (UnimplementedShortenerServer) GetOriginalURL(context.Context, *GetOriginalURLRequest) (*GetOriginalURLResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginalURL not implemented")
}
func (UnimplementedShortenerServer) ShortenerURL(context.Context, *ShortenerURLRequest) (*ShortenerURLResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenerURL not implemented")
}
func (UnimplementedShortenerServer) ShortenerJSON(context.Context, *ShortenerJSONRequest) (*ShortenerJSONResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenerJSON not implemented")
}
func (UnimplementedShortenerServer) CheckDBConnection(context.Context, *CheckDBConnectionRequest) (*CheckDBConnectionResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDBConnection not implemented")
}
func (UnimplementedShortenerServer) GetAllURLs(context.Context, *GetAllURLsRequest) (*GetAllURLsResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllURLs not implemented")
}
func (UnimplementedShortenerServer) InsertBatch(context.Context, *InsertBatchRequest) (*InsertBatchResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertBatch not implemented")
}
func (UnimplementedShortenerServer) DeleteURL(context.Context, *DeleteURLRequest) (*DeleteURLResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteURL not implemented")
}
func (UnimplementedShortenerServer) ServiceStat(context.Context, *ServiceStatRequest) (*ServiceStatResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceStat not implemented")
}
func (UnimplementedShortenerServer) mustEmbedUnimplementedShortenerServer() {}

// UnsafeShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServer will
// result in compilation errors.
type UnsafeShortenerServer interface {
	mustEmbedUnimplementedShortenerServer()
}

func RegisterShortenerServer(s grpc.ServiceRegistrar, srv ShortenerServer) {
	s.RegisterService(&Shortener_ServiceDesc, srv)
}

func _Shortener_GetOriginalURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOriginalURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetOriginalURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetOriginalURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetOriginalURL(ctx, req.(*GetOriginalURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_ShortenerURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenerURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).ShortenerURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_ShortenerURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).ShortenerURL(ctx, req.(*ShortenerURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_ShortenerJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenerJSONRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).ShortenerJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_ShortenerJSON_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).ShortenerJSON(ctx, req.(*ShortenerJSONRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_CheckDBConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDBConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).CheckDBConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_CheckDBConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).CheckDBConnection(ctx, req.(*CheckDBConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetAllURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetAllURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetAllURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetAllURLs(ctx, req.(*GetAllURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_InsertBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).InsertBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_InsertBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).InsertBatch(ctx, req.(*InsertBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_DeleteURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).DeleteURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_DeleteURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).DeleteURL(ctx, req.(*DeleteURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_ServiceStat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceStatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).ServiceStat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_ServiceStat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).ServiceStat(ctx, req.(*ServiceStatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortener_ServiceDesc is the grpc.ServiceDesc for Shortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortenergrpc.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOriginalURL",
			Handler:    _Shortener_GetOriginalURL_Handler,
		},
		{
			MethodName: "ShortenerURL",
			Handler:    _Shortener_ShortenerURL_Handler,
		},
		{
			MethodName: "ShortenerJSON",
			Handler:    _Shortener_ShortenerJSON_Handler,
		},
		{
			MethodName: "CheckDBConnection",
			Handler:    _Shortener_CheckDBConnection_Handler,
		},
		{
			MethodName: "GetAllURLs",
			Handler:    _Shortener_GetAllURLs_Handler,
		},
		{
			MethodName: "InsertBatch",
			Handler:    _Shortener_InsertBatch_Handler,
		},
		{
			MethodName: "DeleteURL",
			Handler:    _Shortener_DeleteURL_Handler,
		},
		{
			MethodName: "ServiceStat",
			Handler:    _Shortener_ServiceStat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/shortener.proto",
}
