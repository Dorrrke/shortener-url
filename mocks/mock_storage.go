// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Dorrrke/shortener-url/pkg/storage (interfaces: Storage)

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	models "github.com/Dorrrke/shortener-url/pkg/models"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// CheckDBConnect mocks base method.
func (m *MockStorage) CheckDBConnect(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDBConnect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckDBConnect indicates an expected call of CheckDBConnect.
func (mr *MockStorageMockRecorder) CheckDBConnect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDBConnect", reflect.TypeOf((*MockStorage)(nil).CheckDBConnect), arg0)
}

// Clear mocks base method.
func (m *MockStorage) Clear(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockStorageMockRecorder) Clear(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockStorage)(nil).Clear), arg0)
}

// CreateTable mocks base method.
func (m *MockStorage) CreateTable(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockStorageMockRecorder) CreateTable(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockStorage)(nil).CreateTable), arg0)
}

// GetAllUrls mocks base method.
func (m *MockStorage) GetAllUrls(arg0 context.Context, arg1 string) ([]models.URLModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUrls", arg0, arg1)
	ret0, _ := ret[0].([]models.URLModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUrls indicates an expected call of GetAllUrls.
func (mr *MockStorageMockRecorder) GetAllUrls(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUrls", reflect.TypeOf((*MockStorage)(nil).GetAllUrls), arg0, arg1)
}

// GetOriginalURLByShort mocks base method.
func (m *MockStorage) GetOriginalURLByShort(arg0 context.Context, arg1 string) (string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalURLByShort", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOriginalURLByShort indicates an expected call of GetOriginalURLByShort.
func (mr *MockStorageMockRecorder) GetOriginalURLByShort(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalURLByShort", reflect.TypeOf((*MockStorage)(nil).GetOriginalURLByShort), arg0, arg1)
}

// GetShortByOriginalURL mocks base method.
func (m *MockStorage) GetShortByOriginalURL(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortByOriginalURL", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortByOriginalURL indicates an expected call of GetShortByOriginalURL.
func (mr *MockStorageMockRecorder) GetShortByOriginalURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortByOriginalURL", reflect.TypeOf((*MockStorage)(nil).GetShortByOriginalURL), arg0, arg1)
}

// GetStats mocks base method.
func (m *MockStorage) GetStats(arg0 context.Context) (int, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStats indicates an expected call of GetStats.
func (mr *MockStorageMockRecorder) GetStats(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockStorage)(nil).GetStats), arg0)
}

// InsertBanchURL mocks base method.
func (m *MockStorage) InsertBanchURL(arg0 context.Context, arg1 []models.BantchURL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBanchURL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBanchURL indicates an expected call of InsertBanchURL.
func (mr *MockStorageMockRecorder) InsertBanchURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBanchURL", reflect.TypeOf((*MockStorage)(nil).InsertBanchURL), arg0, arg1)
}

// InsertURL mocks base method.
func (m *MockStorage) InsertURL(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertURL", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertURL indicates an expected call of InsertURL.
func (mr *MockStorageMockRecorder) InsertURL(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertURL", reflect.TypeOf((*MockStorage)(nil).InsertURL), arg0, arg1, arg2, arg3)
}

// SetDeleteURLStatus mocks base method.
func (m *MockStorage) SetDeleteURLStatus(arg0 context.Context, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeleteURLStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeleteURLStatus indicates an expected call of SetDeleteURLStatus.
func (mr *MockStorageMockRecorder) SetDeleteURLStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeleteURLStatus", reflect.TypeOf((*MockStorage)(nil).SetDeleteURLStatus), arg0, arg1)
}
